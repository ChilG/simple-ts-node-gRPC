// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.1
// source: bidirectional.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  handleBidiStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "bidirectional";

/** Define the complex message type for the array element */
export interface CallArrayElement {
  uniqueId: string;
  action: string;
  payload: Any | undefined;
}

export interface CallResultArrayElement {
  uniqueId: string;
  payload: Any | undefined;
}

export interface CallErrorArrayElement {
  uniqueId: string;
  errorMessage: string;
  errorDetails: string;
  payload: Any | undefined;
}

/** The request message containing the user ID. */
export interface BidirectionalRequest {
  call?: CallArrayElement | undefined;
  callResult?: CallResultArrayElement | undefined;
  callError?: CallErrorArrayElement | undefined;
}

/** The response message containing the user details. */
export interface BidirectionalResponse {
  call?: CallArrayElement | undefined;
  callResult?: CallResultArrayElement | undefined;
  callError?: CallErrorArrayElement | undefined;
}

function createBaseCallArrayElement(): CallArrayElement {
  return { uniqueId: "", action: "", payload: undefined };
}

export const CallArrayElement = {
  encode(message: CallArrayElement, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uniqueId !== "") {
      writer.uint32(10).string(message.uniqueId);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallArrayElement {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallArrayElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallArrayElement {
    return {
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: CallArrayElement): unknown {
    const obj: any = {};
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.payload !== undefined) {
      obj.payload = Any.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallArrayElement>, I>>(base?: I): CallArrayElement {
    return CallArrayElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallArrayElement>, I>>(object: I): CallArrayElement {
    const message = createBaseCallArrayElement();
    message.uniqueId = object.uniqueId ?? "";
    message.action = object.action ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseCallResultArrayElement(): CallResultArrayElement {
  return { uniqueId: "", payload: undefined };
}

export const CallResultArrayElement = {
  encode(message: CallResultArrayElement, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uniqueId !== "") {
      writer.uint32(10).string(message.uniqueId);
    }
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallResultArrayElement {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallResultArrayElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallResultArrayElement {
    return {
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: CallResultArrayElement): unknown {
    const obj: any = {};
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.payload !== undefined) {
      obj.payload = Any.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallResultArrayElement>, I>>(base?: I): CallResultArrayElement {
    return CallResultArrayElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallResultArrayElement>, I>>(object: I): CallResultArrayElement {
    const message = createBaseCallResultArrayElement();
    message.uniqueId = object.uniqueId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseCallErrorArrayElement(): CallErrorArrayElement {
  return { uniqueId: "", errorMessage: "", errorDetails: "", payload: undefined };
}

export const CallErrorArrayElement = {
  encode(message: CallErrorArrayElement, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uniqueId !== "") {
      writer.uint32(10).string(message.uniqueId);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.errorDetails !== "") {
      writer.uint32(26).string(message.errorDetails);
    }
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallErrorArrayElement {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallErrorArrayElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorDetails = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payload = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallErrorArrayElement {
    return {
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      errorDetails: isSet(object.errorDetails) ? globalThis.String(object.errorDetails) : "",
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: CallErrorArrayElement): unknown {
    const obj: any = {};
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.errorDetails !== "") {
      obj.errorDetails = message.errorDetails;
    }
    if (message.payload !== undefined) {
      obj.payload = Any.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallErrorArrayElement>, I>>(base?: I): CallErrorArrayElement {
    return CallErrorArrayElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallErrorArrayElement>, I>>(object: I): CallErrorArrayElement {
    const message = createBaseCallErrorArrayElement();
    message.uniqueId = object.uniqueId ?? "";
    message.errorMessage = object.errorMessage ?? "";
    message.errorDetails = object.errorDetails ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseBidirectionalRequest(): BidirectionalRequest {
  return { call: undefined, callResult: undefined, callError: undefined };
}

export const BidirectionalRequest = {
  encode(message: BidirectionalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.call !== undefined) {
      CallArrayElement.encode(message.call, writer.uint32(10).fork()).ldelim();
    }
    if (message.callResult !== undefined) {
      CallResultArrayElement.encode(message.callResult, writer.uint32(18).fork()).ldelim();
    }
    if (message.callError !== undefined) {
      CallErrorArrayElement.encode(message.callError, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BidirectionalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBidirectionalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.call = CallArrayElement.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.callResult = CallResultArrayElement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.callError = CallErrorArrayElement.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BidirectionalRequest {
    return {
      call: isSet(object.call) ? CallArrayElement.fromJSON(object.call) : undefined,
      callResult: isSet(object.callResult) ? CallResultArrayElement.fromJSON(object.callResult) : undefined,
      callError: isSet(object.callError) ? CallErrorArrayElement.fromJSON(object.callError) : undefined,
    };
  },

  toJSON(message: BidirectionalRequest): unknown {
    const obj: any = {};
    if (message.call !== undefined) {
      obj.call = CallArrayElement.toJSON(message.call);
    }
    if (message.callResult !== undefined) {
      obj.callResult = CallResultArrayElement.toJSON(message.callResult);
    }
    if (message.callError !== undefined) {
      obj.callError = CallErrorArrayElement.toJSON(message.callError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BidirectionalRequest>, I>>(base?: I): BidirectionalRequest {
    return BidirectionalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BidirectionalRequest>, I>>(object: I): BidirectionalRequest {
    const message = createBaseBidirectionalRequest();
    message.call = (object.call !== undefined && object.call !== null)
      ? CallArrayElement.fromPartial(object.call)
      : undefined;
    message.callResult = (object.callResult !== undefined && object.callResult !== null)
      ? CallResultArrayElement.fromPartial(object.callResult)
      : undefined;
    message.callError = (object.callError !== undefined && object.callError !== null)
      ? CallErrorArrayElement.fromPartial(object.callError)
      : undefined;
    return message;
  },
};

function createBaseBidirectionalResponse(): BidirectionalResponse {
  return { call: undefined, callResult: undefined, callError: undefined };
}

export const BidirectionalResponse = {
  encode(message: BidirectionalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.call !== undefined) {
      CallArrayElement.encode(message.call, writer.uint32(10).fork()).ldelim();
    }
    if (message.callResult !== undefined) {
      CallResultArrayElement.encode(message.callResult, writer.uint32(18).fork()).ldelim();
    }
    if (message.callError !== undefined) {
      CallErrorArrayElement.encode(message.callError, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BidirectionalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBidirectionalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.call = CallArrayElement.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.callResult = CallResultArrayElement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.callError = CallErrorArrayElement.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BidirectionalResponse {
    return {
      call: isSet(object.call) ? CallArrayElement.fromJSON(object.call) : undefined,
      callResult: isSet(object.callResult) ? CallResultArrayElement.fromJSON(object.callResult) : undefined,
      callError: isSet(object.callError) ? CallErrorArrayElement.fromJSON(object.callError) : undefined,
    };
  },

  toJSON(message: BidirectionalResponse): unknown {
    const obj: any = {};
    if (message.call !== undefined) {
      obj.call = CallArrayElement.toJSON(message.call);
    }
    if (message.callResult !== undefined) {
      obj.callResult = CallResultArrayElement.toJSON(message.callResult);
    }
    if (message.callError !== undefined) {
      obj.callError = CallErrorArrayElement.toJSON(message.callError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BidirectionalResponse>, I>>(base?: I): BidirectionalResponse {
    return BidirectionalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BidirectionalResponse>, I>>(object: I): BidirectionalResponse {
    const message = createBaseBidirectionalResponse();
    message.call = (object.call !== undefined && object.call !== null)
      ? CallArrayElement.fromPartial(object.call)
      : undefined;
    message.callResult = (object.callResult !== undefined && object.callResult !== null)
      ? CallResultArrayElement.fromPartial(object.callResult)
      : undefined;
    message.callError = (object.callError !== undefined && object.callError !== null)
      ? CallErrorArrayElement.fromPartial(object.callError)
      : undefined;
    return message;
  },
};

/** The user service definition. */
export type BidirectionalService = typeof BidirectionalService;
export const BidirectionalService = {
  /** Gets a user by ID */
  communication: {
    path: "/bidirectional.Bidirectional/Communication",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: BidirectionalRequest) => Buffer.from(BidirectionalRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BidirectionalRequest.decode(value),
    responseSerialize: (value: BidirectionalResponse) => Buffer.from(BidirectionalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BidirectionalResponse.decode(value),
  },
} as const;

export interface BidirectionalServer extends UntypedServiceImplementation {
  /** Gets a user by ID */
  communication: handleBidiStreamingCall<BidirectionalRequest, BidirectionalResponse>;
}

export interface BidirectionalClient extends Client {
  /** Gets a user by ID */
  communication(): ClientDuplexStream<BidirectionalRequest, BidirectionalResponse>;
  communication(options: Partial<CallOptions>): ClientDuplexStream<BidirectionalRequest, BidirectionalResponse>;
  communication(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<BidirectionalRequest, BidirectionalResponse>;
}

export const BidirectionalClient = makeGenericClientConstructor(
  BidirectionalService,
  "bidirectional.Bidirectional",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BidirectionalClient;
  service: typeof BidirectionalService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
